# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает, 
# Вам стоит написать программу. 
# Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. 
# Фраза может состоять из одного слова, если во фразе несколько слов, то они разделяются дефисами. 
# Фразы отделяются друг от друга пробелами. Стихотворение  Винни-Пух вбивает в программу с клавиатуры. 
# В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке

# *Пример:*

# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да    
#     **Вывод:** Парам пам-пам  

# Решение с помощью обычной функции 
# def rhyme(rhyme_str):
#     '''В ответе напишите “Парам пам-пам”, если с ритмом все в порядке. “Пам парам”, если с ритмом все не в порядке'''
#     rhyme_str = rhyme_str.split() # ['пара-ра-рам', 'рам-пам-папам', 'па-ра-па-да']
#     rhyme_list = []
#     for word in rhyme_str: # проходимся по словам в строке 
#         sum_letter = 0 
#         for i in word: # затем проходимся по каждой букве в слове
#             if i in "ауеоэяиюёы":
#                 sum_letter +=1
#         rhyme_list.append(sum_letter)
#     # return len(rhyme_list) == rhyme_list.count(rhyme_list[0]) 
#     # #используем метод count, который позволяет найти сколько раз элемент появлялся в списке
#     # т.е. длина числа 3, это число появлялось в списке 3 раза
#     if len(set(rhyme_list)) == 1:
#     # преобразуем во множество, затем проверяем на длину. Если во множестве все одинаковые числа, то длина будет = 1    
#         return 'Парам пам-пам' 
#     return 'Пам парам' # выводит это сообщение если рифмы нет

# rhyme_str = ('пара-ра-рам рам-пам-папам па-ра-па-да')
# print(rhyme(rhyme_str))
#///////////////////////////////////////////////////////

#Строка после преобразования 
# rhyme_str = ('пара-ра-рам рам-пам-папам па-ра-па-да').split()
# print(rhyme_str) #['пара-ра-рам', 'рам-пам-папам', 'па-ра-па-да']
# print(type(rhyme_str))

#///////////////////////////////////////////////////////

# Решение с помощью функций высшего порядка 
# def (f x: str): # описание функции лямба 
#     mass = []
#     vovels =['а', 'о', 'у', 'э', 'е', 'ё', 'и', 'ю', 'я']
#     for i in x:
#         if i in vovels:
#             mass.append(i)
#     return len(mass)

# def rythm(phrase: str) -> str: #решение с помощью лямбды 
#     pharase = phrase.lower().split()
#     vovels =['а', 'о', 'у', 'э', 'е', 'ё', 'и', 'ю', 'я']
#     if len(set(map(lambda x: len([i for i in x if i in vovels]),phrase))) == 1:
#     # if len(set(map(lambda word: len([letter for letter in word if letter in vovels]),phrase))) == 1:
#         return 'Парам пам пам'
#     return 'пам парам'

#///////////////////////////////////////////////////

# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны. 
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, 
# у операции умножения.

# *Пример:*

# **Ввод:** `print_operation_table(lambda x, y: x * y) ` 
# **Вывод:**

# 1 2 3 4 5 6

# 2 4 6 8 10 12
# 3 6 9 12 15 18
# 4 8 12 16 20 24
# 5 10 15 20 25 30
# 6 12 18 24 30 36

# def print_operation_table(operation, num_rows, num_columns):
#     for i in range(1, num_rows+1):
#         table = []
#         for j in range(1, num_columns+1):
#             table.append(operation(i, j))
#         # print(*table,sep = ' ')  
#         print(''.join(f'{x:<4}' for x in table)) # метод вывода 
        
# print_operation_table(lambda x, y: x * y, 6,6)
