# Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A. 
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
# В последующих  строках записаны N целых чисел Ai. 
# Последняя строка содержит число X. Попробуйте использовать метод count(), 
# а также решите задачу с помощью своего алгоритма (без count). 
# Замерьте время работы двух алгоритмов и сравните, подумайте, почему оно отличается.
# *Пример:*
# 5
#     1 2 3 4 5
#     3
#     -> 1
# print('Задача №16')
# import time

# input_list = [] # пустой список 
# list_len = int(input("Введите количество элементов в массиве: "))
# for i in range(list_len):
#     input_list.append(int(input(f"Введите число: "))) # добавление в список чисел  
# print(input_list)

# #  1 метод 
# start = time.perf_counter()
# search = int(input("Введите число для поиска: "))
# count = 0
# for j in input_list:
#     if j == search:
#         count +=1
# print(count)
# end = time.perf_counter()
# first_time = end - start

# # Метод count
# start = time.perf_counter()
# print(input_list.count(search))
# end = time.perf_counter()
# second_time = end - start

# print(f"Метод count быстрее в {round(first_time / second_time, 2)} раза")


# Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X. 
# Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
# В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X
# *Пример:*
# 5
#     1 2 3 4 5
#     6
#     -> 5

# print('Задача №18')
# import random
# input_list = [random.randint(1, 100) for _ in range(10)]
# number_set = set(input_list)
# print(number_set)
# diff = 1 # разница, которую будем вычитать\прибавлять  
# number = int(input("Введите число для сравнения: "))
# while True:
#     if number - diff in number_set:
#         print (number - diff)
#         break
#     elif number + diff in number_set:
#         print (number + diff)
#         break
#     diff +=1

# *Задача 20: * В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. 
# В случае с английским алфавитом очки распределяются так:
# A, E, I, O, U, L, N, S, T, R – 1 очко; 
# D, G – 2 очка; 
# B, C, M, P – 3 очка; 
# F, H, V, W, Y – 4 очка; 
# K – 5 очков; 
# J, X – 8 очков; 
# Q, Z – 10 очков. 
# А русские буквы оцениваются так: А, В, Е, И, Н, О, Р, С, Т – 1 очко; 
# Д, К, Л, М, П, У – 2 очка; 
# Б, Г, Ё, Ь, Я – 3 очка; 
# Й, Ы – 4 очка; 
# Ж, З, Х, Ц, Ч – 5 очков; 
# Ш, Э, Ю – 8 очков; Ф, Щ, Ъ – 10 очков. 
# Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
# Будем считать, что на вход подается только одно слово, 
# которое содержит либо только английские, либо только русские буквы.

# *Пример:*
# ноутбук
#     12

# print('Задача №20')
# input_str = input('Введите слово на англ языке: ').upper()
# scrabble_dick = {'A': 1, 'E': 1, 'I': 1, 'O': 1, 'U':1, 'L':1, 'N':1, 'S':1, 'T':1, 'R':1, 
#                  'D':2 , 'G':2, 'B':3, 'C':3, 'M':3, 'P':3, 'F':4, 'H':4, 'V':4, 'W':4, 'Y':4, 
#                  'K':5, 'J':8, 'X':8, 'Q':10, 'Z':10}
# count = 0
# for i in range(len(input_str)):
#     count = count + scrabble_dick[input_str[i]] # в словарь кладем часть слова по индексу (букву) и она является ключом 
# print(f'Ценность введенного слова {count}')